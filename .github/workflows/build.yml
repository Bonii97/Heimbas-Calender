name: Build and Publish ICS

on:
  schedule:
    - cron: "0 * * * *"  # stündlich
  workflow_dispatch: {}

concurrency:
  group: pages
  cancel-in-progress: true

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      should_deploy: ${{ steps.check.outputs.should_deploy }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: 'requirements.txt'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          python -m playwright install --with-deps chromium

      - name: Run scraper (single or multi user)
        env:
          HEIMBAS_USER: ${{ secrets.HEIMBAS_USER }}
          HEIMBAS_PASS: ${{ secrets.HEIMBAS_PASS }}
          # Unterstütze sowohl Secret als auch Repository Variable
          USERS_JSON: ${{ secrets.USERS_JSON || vars.USERS_JSON }}
        run: |
          set -euo pipefail
          if [ -n "${USERS_JSON:-}" ]; then
            echo "USERS_JSON erkannt – Multi-User-Run"
            # Nur LÄNGE loggen, nie den Inhalt
            echo "USERS_JSON length: $(echo -n "$USERS_JSON" | wc -c)"
            printf "%s" "$USERS_JSON" > users.json
            echo "users.json geschrieben: $(wc -c < users.json) Bytes"
            python scraper.py --users-json-path users.json --output dienstplan.ics
          else
            echo "USERS_JSON leer – Single-User-Run (erwartet HEIMBAS_USER/HEIMBAS_PASS)"
            python scraper.py --output dienstplan.ics
          fi

      - name: Prepare site folder
        run: |
          mkdir -p site
          cp dienstplan.ics site/index.ics
          # Falls Multi-User-Dateien vorhanden sind, kopieren
          for f in dienstplan_*.ics; do
            if [ -f "$f" ]; then
              cp "$f" "site/$f"
            fi
          done
          cat > site/index.html <<'HTML'
          <!doctype html>
          <html lang="de">
            <head>
              <meta charset="utf-8" />
              <meta name="viewport" content="width=device-width, initial-scale=1" />
              <meta name="robots" content="noindex,nofollow,noarchive" />
              <title>Dienstplan ICS</title>
              <style>
                body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,sans-serif;max-width:720px;margin:40px auto;padding:0 16px;}
                code{background:#f3f3f3;padding:2px 6px;border-radius:4px}
              </style>
            </head>
            <body>
              <h1>Dienstplan ICS</h1>
              <p>Abonnierbare ICS-Datei:</p>
              <p><a href="./index.ics">index.ics</a></p>
              <hr/>
              <h2>Mehrere Benutzer</h2>
              <p>Wenn mehrere Benutzer konfiguriert sind, findest du hier je Benutzer eine ICS-Datei:</p>
              <ul>
                <script>
                  fetch('./').then(r=>r.text()).then(html=>{
                    const m = html.match(/href=\"(dienstplan_[^\"]+\.ics)\"/g) || [];
                    const u = document.querySelector('ul');
                    m.map(x=>x.replace('href="','').replace('"','')).forEach(fn=>{
                      const li=document.createElement('li');
                      const a=document.createElement('a');
                      a.href='./'+fn; a.textContent=fn; li.appendChild(a); u.appendChild(li);
                    });
                  });
                </script>
              </ul>
              <p>Diese Datei wird stündlich automatisch aktualisiert.</p>
            </body>
          </html>
          HTML

          # robots.txt (ohne Heredoc, damit YAML-Linter ruhig bleibt)
          echo "User-agent: *" > site/robots.txt
          echo "Disallow: /" >> site/robots.txt

      - name: Check if content changed
        id: check
        env:
          PAGES_URL: https://bonii97.github.io/Heimbas-Calender/index.ics
        run: |
          set -euo pipefail
          if [ ! -f site/index.ics ]; then
            echo "should_deploy=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          local_hash=$(sha1sum site/index.ics | awk '{print $1}')
          if curl -fsSL "$PAGES_URL" -o /tmp/remote.ics; then
            remote_hash=$(sha1sum /tmp/remote.ics | awk '{print $1}')
            if [ "$local_hash" = "$remote_hash" ]; then
              echo "Keine Inhaltsänderung erkannt – Deployment wird übersprungen"
              echo "should_deploy=false" >> "$GITHUB_OUTPUT"
              exit 0
            fi
          fi
          echo "should_deploy=true" >> "$GITHUB_OUTPUT"

      - name: Setup Pages
        if: steps.check.outputs.should_deploy == 'true'
        uses: actions/configure-pages@v5

      - name: Upload artifact
        if: steps.check.outputs.should_deploy == 'true'
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: needs.build.outputs.should_deploy == 'true'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4


